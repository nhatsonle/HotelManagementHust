// models/index.js
const { sequelize } = require('../config/db.config'); // N·∫°p instance sequelize

// N·∫°p t·∫•t c·∫£ c√°c models
const Guest = require('./Guest.model');
const Feedback = require('./Feedback.model');
const Booking = require('./Booking.model');
const Rate = require('./Rate.model');
const Room = require('./Room.model');
const RoomType = require('./RoomType.model');

// ----- ƒê·ªäNH NGHƒ®A C√ÅC M·ªêI QUAN H·ªÜ (ASSOCIATIONS) -----

// 1. Guest <-> Booking (M·ªôt Guest c√≥ nhi·ªÅu Booking, m·ªôt Booking thu·ªôc v·ªÅ m·ªôt Guest)
Guest.hasMany(Booking, {
  foreignKey: 'guest_id', // Kh√≥a ngo·∫°i trong b·∫£ng 'bookings'
  as: 'bookings'          // T√™n b√≠ danh cho m·ªëi quan h·ªá (v√≠ d·ª•: guest.getBookings())
});
Booking.belongsTo(Guest, {
  foreignKey: 'guest_id',
  as: 'guest'
});

// 2. Guest <-> Feedback
Guest.hasMany(Feedback, {
  foreignKey: 'guest_id',
  as: 'feedbacks'
});
Feedback.belongsTo(Guest, {
  foreignKey: 'guest_id',
  as: 'guest'
});

// 3. RoomType <-> Room
RoomType.hasMany(Room, {
  foreignKey: 'type_id',
  as: 'rooms'
});
Room.belongsTo(RoomType, {
  foreignKey: 'type_id',
  as: 'roomType'
});

// 4. RoomType <-> Rate
RoomType.hasMany(Rate, {
  foreignKey: 'type_id',
  as: 'rates'
});
Rate.belongsTo(RoomType, {
  foreignKey: 'type_id',
  as: 'roomType'
});

// 5. Room <-> Booking
Room.hasMany(Booking, {
  foreignKey: 'room_id',
  as: 'bookings'
});
Booking.belongsTo(Room, {
  foreignKey: 'room_id',
  as: 'room'
});

// 6. Room <-> Feedback
Room.hasMany(Feedback, {
  foreignKey: 'room_id',
  as: 'feedbacks'
});
Feedback.belongsTo(Room, {
  foreignKey: 'room_id',
  as: 'room'
});

// ƒê·ªìng b·ªô h√≥a t·∫•t c·∫£ c√°c model v·ªõi database (ch·ªâ n√™n d√πng trong development n·∫øu b·∫£ng ch∆∞a c√≥)
// V√¨ b·∫°n ƒë√£ c√≥ b·∫£ng s·∫µn, b∆∞·ªõc n√†y c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt ho·∫∑c c·∫ßn c·∫©n th·∫≠n.
// N·∫øu model kh·ªõp ho√†n to√†n v·ªõi b·∫£ng, sequelize.sync() s·∫Ω kh√¥ng l√†m g√¨.
// KH√îNG D√ôNG { force: true } ho·∫∑c { alter: true } n·∫øu b·∫°n kh√¥ng mu·ªën m·∫•t/thay ƒë·ªïi d·ªØ li·ªáu hi·ªán c√≥.
/*
sequelize.sync() // C√≥ th·ªÉ th√™m { alter: true } n·∫øu b·∫°n mu·ªën Sequelize c·ªë g·∫Øng c·∫≠p nh·∫≠t b·∫£ng
  .then(() => {
    console.log('üîÑ Database & tables synced (ho·∫∑c ƒë√£ t·ªìn t·∫°i v√† kh·ªõp model).');
  })
  .catch(error => {
    console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô h√≥a database:', error);
  });
*/

// Xu·∫•t kh·∫©u sequelize instance v√† t·∫•t c·∫£ c√°c models ƒë√£ ƒë∆∞·ª£c n·∫°p v√† li√™n k·∫øt
module.exports = {
  sequelize, // Instance sequelize ƒë√£ k·∫øt n·ªëi
  Guest,
  Feedback,
  Booking,
  Rate,
  Room,
  RoomType
};